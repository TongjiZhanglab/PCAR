#!/usr/bin/env bash

ProgName=$(basename $0)

help_print(){
	cat <<EOF
Usage: 	pcar -m ${ProgName} -H H3K9me3.rmDup.bam -M methyl.sam.G.bed -Z genomesize -Q genomesequence [options]
	-h, --help 	--help information

Parameters passed from PCAR:
 -H, --h3k9me3 HFILE		H3K9me3 ChIP-seq sequence alignment after removing duplicates. REQUIRED.
 -C, --control CFILE		Input ChIP-seq sequence alignment after removing duplicates. Defalt: "".
 -M, --methyl MFILE		DNA methylation level of CpG sites estimated using mcall. REQUIRED.
 -Z, --gsiz ZFILE		Two-column file: <chromosome name><tab><size in bases> downloaded from UCSC. REQUIRED.
 -Q, --gseq QFILE		Genome sequence file in twoBit format downloaded from UCSC. REQUIRED.
 -G, --gver GVER		Genome build version. Default: mm10.
 -B, --binsize <int>		The number of base pair in a bin determing the resolution of the model learning and segmentation. Default: 200 base pairs.
 -P, --poissonthresh <float>		This option specifies the tail probability of the poisson distribution that the binarization threshold should correspond to. Default: 0.0001.
 -N, --name NAME		Name will be used to generate file names. Default: NA.
 -T, --threads <int>		Number of threads to use. Default: 1.
 -O, --outdir OUTDIR		If specified all output files will be written to that directory. Default: the current working directory.
 -D, --definition <CHM|CH-nonM|CM-nonH>		Choosing the definition of region to be called. Default: CHM.
EOF
}

if [ $# = 0 ]
then
	help_print
	exit 1
fi

ARGS=$(getopt -o H:C:M:Z:Q:G:B:P:N:T:O:D:h --long h3k9me3:,control:,methyl:,gsiz:,gseq:,gver:,binsize:,poissonthresh:,name:,threads:,outdir:,definition:,help -n "pcar -m callchm" -- "$@")
eval set -- "${ARGS}"
while true
do
	case "${1}" in
		-H | --h3k9me3)
			H3K9me3=$(realpath ${2});shift 2;;
		-C | --control)
			Control=$(realpath ${2});shift 2;;
		-M | --methyl)
			Methyl=$(realpath ${2});shift 2;;
		-Z | --gsiz)
			GenomeSiz=$(realpath ${2});shift 2;;
		-Q | --gseq)
			GenomeSeq=$(realpath ${2});shift 2;;
		-G | --gver)
			GenomeVer=${2};shift 2;;
		-B | --binsize)
			BinSize=${2};shift 2;;
		-P | --poissonthresh)
			Poissonthresh=${2};shift 2;;
		-N | --name)
			Name=${2};shift 2;;
		-T | --threads)
			Threads=${2};shift 2;;
		-O | --outdir)
			OutDir=$(realpath ${2});shift 2;;
		-D | --definition)
			Definition=${2};shift 2;;
		-h | --help)
			help_print;exit 1;;
		--)
			shift
			break
			;;
		*)
			echo "Unknown parameter:" ${1}
			help_print
			exit 1
			;;
		\?)
			echo "Invalid option: -${2}"
			;;
		:)
			echo "Option -${1} requires an argument."
			exit 1
			;;
		esac
done


# step-1. check whether version of ChromHMM.jar is higher than v1.22
locate ChromHMM/ChromHMM.jar > ChromHMMs.temp && find ~ -name "ChromHMM.jar" >> ChromHMMs.temp
ChromHMMs=$(cat ChromHMMs.temp) && rm ChromHMMs.temp
ChromHMM_PATH=
for chromhmm in ${ChromHMMs}
do
	ChromHMM_VERSION=$(java -jar ${chromhmm} version | awk 'BEGIN{FS=" "}{print $4}')
	if [ $(echo "${ChromHMM_VERSION}>=1.22" | bc) -eq 1 ]
	then
		ChromHMM_PATH=${chromhmm}
	fi
done # for chromhmm

if [ -z ${ChromHMM_PATH} ]
then
	echo "Please download a version of ChromHMM higher than v1.22!!!"
else
	mkdir -p ${OutDir};cd ${OutDir}
	# step0. prepare annotation in BinSize-bp
	bedtools makewindows -g ${GenomeSiz} -w ${BinSize} > b${BinSize}bp.bed
	cat b${BinSize}bp.bed | awk -v BINSIZE=${BinSize} 'BEGIN{FS=OFS="\t"}{if($3-$2==BINSIZE){print $0}}' > b${BinSize}bp.bed.tmp && mv b${BinSize}bp.bed.tmp b${BinSize}bp.bed


	# step1. binarize H3K9me3 signal from bam file
	# have input ChIP-seq file or not
	if [ "$(basename ${Control})" == "-" ];then
		BamName=$(basename ${H3K9me3})
		BamPath=$(dirname ${H3K9me3})
		echo -e "${Name}\tH3K9me3\t${BamName}" > config_H3K9me3.txt
		# pair-end or single-end
		nPAIRED=$(samtools view -@ ${Threads} -c -f 1 ${H3K9me3})
		if [ "${nPAIRED}" -eq "0" ]
		then
			java -Xmx50g -jar ${ChromHMM_PATH} BinarizeBam -b ${BinSize} -p ${Poissonthresh} ${GenomeSiz} ${BamPath} config_H3K9me3.txt Binarized_H3K9me3_${Name}
		else
			java -Xmx50g -jar ${ChromHMM_PATH} BinarizeBam -paired -b ${BinSize} -p ${Poissonthresh} ${GenomeSiz} ${BamPath} config_H3K9me3.txt Binarized_H3K9me3_${Name}
		fi
	else
		BamName=$(basename ${H3K9me3})
		BamPath=$(dirname ${H3K9me3})
		CtrlBamName=$(basename ${Control})
		CtrlBamPath=$(dirname ${Control})
		echo -e "${Name}\tH3K9me3\t${BamName}\t${CtrlBamName}" > config_H3K9me3_wiCtrl.txt
		# pair-end or single-end
		nPAIRED=$(samtools view -@ ${Threads} -c -f 1 ${H3K9me3})
		if [ "${nPAIRED}" -eq "0" ]
		then
			java -Xmx50g -jar ${ChromHMM_PATH} BinarizeBam -b ${BinSize} -c ${CtrlBamPath} -o Binarized_H3K9me3_${Name}_ctrl -p ${Poissonthresh} ${GenomeSiz} ${BamPath} config_H3K9me3_wiCtrl.txt Binarized_H3K9me3_${Name}
		else
			java -Xmx50g -jar ${ChromHMM_PATH} BinarizeBam -paired -b ${BinSize} -c ${CtrlBamPath} -o Binarized_H3K9me3_${Name}_ctrl -p ${Poissonthresh} ${GenomeSiz} ${BamPath} config_H3K9me3_wiCtrl.txt Binarized_H3K9me3_${Name}
		fi
	fi



	# step2. binarize DNA methylation level from sam.G.bed (threshold = 0.5)
	# calculate DNA methylation level in whole genome BinSize (200bp) bins
	bash pcar_averageMethylInRegionMultipleThreads.sh b${BinSize}bp.bed ${Methyl} ${Name}.methyl.txt 1

	# binarize DNA methylation level (threshold = 0.5)
	mkdir -p ${OutDir}/Binarized_Methyl_${Name}
	for chrom in $(cut -f 1 ${GenomeSiz} | sort -u)
	do
		echo -e "${Name}\t${chrom}\nMethyl" > ${OutDir}/Binarized_Methyl_${Name}/${Name}_${chrom}_binary.txt
		grep -w "${chrom}" ${Name}.methyl.txt | awk 'BEGIN{FS=OFS="\t"}{\
		 if($4=="NA"){print "2"} \
		 else if($4<0.5){print "0"} \
		 else{print "1"}}' >> ${OutDir}/Binarized_Methyl_${Name}/${Name}_${chrom}_binary.txt
	done # for chrom end


	# step3. binarize CpG number
	# count CpG number in whole genome BinSize (200bp) bins
	pcar_getCpGnumberMultipleTs.py b${BinSize}bp.bed b${BinSize}bp ${GenomeSeq} 1

	# binarize according to CpG number (threshold = 6 for 200bp bins)
	mkdir -p ${OutDir}/Binarized_CpGNumber_${Name}
	for chrom in $(cut -f 1 ${GenomeSiz} | sort -u)
	do
		echo -e "${BinSize}bp\t${chrom}\nCpGNumber" > ${OutDir}/Binarized_CpGNumber_${Name}/${Name}_${chrom}_binary.txt
		grep -w "${chrom}" b${BinSize}bp.CpGNumber | awk 'BEGIN{FS=OFS="\t"}{\
			if($4<6){print "0"} else{print "1"}}' >> ${OutDir}/Binarized_CpGNumber_${Name}/${Name}_${chrom}_binary.txt
	done # for chrom end


	# step4. binarize according to co-occupancy of CpG number, H3K9me3 and DNA methylation
	mkdir -p ${OutDir}/Binarized_Cooccupancy_${Name}.${Definition}
	for chrom in $(cut -f 1 ${GenomeSiz} | sort -u)
	do
		echo -e "${Name}\t${chrom}\nMerged" > ${OutDir}/Binarized_Cooccupancy_${Name}.${Definition}/${Name}_${chrom}_binary.txt
		case $Definition in
			"CHM")
				paste Binarized_Methyl_${Name}/${Name}_${chrom}_binary.txt Binarized_H3K9me3_${Name}/${Name}_${chrom}_binary.txt Binarized_CpGNumber_${Name}/${Name}_${chrom}_binary.txt | \
		 		 tail -n +3 | awk 'BEGIN{FS=OFS="\t"}{if($1==2){print 2} else{if($1==1 && $2==1 && $3==1){print 1} else{print 0}}}' >> ${OutDir}/Binarized_Cooccupancy_${Name}.${Definition}/${Name}_${chrom}_binary.txt #####
				;; 
			'CH-nonM')
				paste Binarized_Methyl_${Name}/${Name}_${chrom}_binary.txt Binarized_H3K9me3_${Name}/${Name}_${chrom}_binary.txt Binarized_CpGNumber_${Name}/${Name}_${chrom}_binary.txt | \
		 		 tail -n +3 | awk 'BEGIN{FS=OFS="\t"}{if($1==2){print 2} else{if($1==0 && $2==1 && $3==1){print 1} else{print 0}}}' >> ${OutDir}/Binarized_Cooccupancy_${Name}.${Definition}/${Name}_${chrom}_binary.txt #####
				;; 				
			'CM-nonH')
				paste Binarized_Methyl_${Name}/${Name}_${chrom}_binary.txt Binarized_H3K9me3_${Name}/${Name}_${chrom}_binary.txt Binarized_CpGNumber_${Name}/${Name}_${chrom}_binary.txt | \
		 		 tail -n +3 | awk 'BEGIN{FS=OFS="\t"}{if($1==2){print 2} else{if($1==1 && $2==0 && $3==1){print 1} else{print 0}}}' >> ${OutDir}/Binarized_Cooccupancy_${Name}.${Definition}/${Name}_${chrom}_binary.txt #####
				;; 		
			*)
				echo "Error: Please choose a definition among 'CHM', 'CH-nonM', CM-nonH' to calculate!";
				help_print;
				exit 1;
		esac
		paste Binarized_Methyl_${Name}/${Name}_${chrom}_binary.txt Binarized_H3K9me3_${Name}/${Name}_${chrom}_binary.txt Binarized_CpGNumber_${Name}/${Name}_${chrom}_binary.txt | \
		 tail -n +3 | awk 'BEGIN{FS=OFS="\t"}{if($1==2){print 2} else{if($1==1 && $2==1 && $3==1){print 1} else{print 0}}}' >> ${OutDir}/Binarized_Cooccupancy_${Name}.${Definition}/${Name}_${chrom}_binary.txt #####
	done # for chrom end


	# step5. learn model
	java -Xmx50g -jar ${ChromHMM_PATH} LearnModel -b ${BinSize} -init random -p ${Threads} Binarized_Cooccupancy_${Name}.${Definition} Output_${Name}.${Definition} 2 ${GenomeVer}
	cd ${OutDir}/Output_${Name}.${Definition}
	State=$(tail -n +2 emissions_2_999.txt | awk 'BEGIN{FS=OFS="\t";S="E1";MAX=-1;}{if($2>MAX){MAX=$2;S=$1}}END{print "E"S}')
	tail -n +2 ${Name}_2_999_segments.bed | grep -w ${State} | cut -f 1-3 | sort -k1,1 -k2,2n | mergeBed -i - -d 2000 | awk 'BEGIN{FS=OFS="\t"}{if($3-$2>=600 && $2!=0){print }}' > ../${Name}.${Definition}.bed

	# step6. remove temporary files
	cd ..
	rm -rf config_H3K9me3.txt b${BinSize}bp.bed b${BinSize}bp.CpGNumber ${Name}.methyl.txt Binarized_CpGNumber_${Name} Binarized_H3K9me3_${Name} Binarized_Methyl_${Name} Binarized_Cooccupancy_${Name}.${Definition} Output_${Name}.${Definition}
fi
